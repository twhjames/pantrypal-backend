from datetime import datetime
from typing import Optional

from pydantic import BaseModel, ConfigDict, Field, field_validator, model_validator

from src.core.chatbot.constants import ChatbotMessageRole
from src.core.chatbot.specs import ChatMessageSpec
from src.core.common.utils import DateTimeUtils


class Message(BaseModel):
    user_id: int = Field(
        ..., description="Unique identifier of the user sending the message"
    )
    session_id: Optional[int] = Field(
        default=None, description="Identifier of the chat session"
    )
    role: ChatbotMessageRole = Field(
        ..., description="Role in the conversation (user, assistant, or system)"
    )
    content: str = Field(..., description="Message content")
    timestamp: Optional[datetime] = None

    @field_validator("role", mode="before")
    @classmethod
    def validate_and_normalize_role(cls, value):
        if isinstance(value, ChatbotMessageRole):
            return value
        try:
            return ChatbotMessageRole(value.lower())
        except ValueError:
            raise ValueError(
                f"Invalid role: {value}. Must be one of: "
                f"{', '.join([e.value for e in ChatbotMessageRole])}"
            )

    @model_validator(mode="after")
    def set_timestamp_if_missing(self):
        if self.timestamp is None:
            self.timestamp = DateTimeUtils.get_utc_now()
        return self

    def to_spec(self) -> ChatMessageSpec:
        return ChatMessageSpec(
            user_id=self.user_id,
            session_id=self.session_id,
            role=self.role,
            content=self.content,
            timestamp=self.timestamp or DateTimeUtils.get_utc_now(),
        )


class RecommendMessage(Message):
    """Message schema for recipe recommendation, no session_id example."""

    model_config = ConfigDict(
        json_schema_extra={
            "examples": [
                {
                    "user_id": 1,
                    "role": "user",
                    "content": "What can I make with rice and eggs?",
                    "timestamp": None,
                }
            ]
        }
    )


class ContextualChatMessage(Message):
    """Message schema for contextual chat, with session_id example."""

    model_config = ConfigDict(
        json_schema_extra={
            "examples": [
                {
                    "user_id": 1,
                    "session_id": 10,
                    "role": "user",
                    "content": "Let's continue from earlier, any other ideas?",
                    "timestamp": None,
                }
            ]
        }
    )


class ChatReply(BaseModel):
    reply: str = Field(..., description="Response generated by the chatbot")
    session_id: Optional[int] = Field(
        default=None, description="Identifier of the related chat session"
    )

    model_config = ConfigDict(
        json_schema_extra={
            "examples": [
                {
                    "reply": "How about making egg fried rice with some soy sauce and vegetables?",
                    "session_id": 1,
                }
            ]
        }
    )
